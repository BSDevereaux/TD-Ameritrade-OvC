import yfinance as yf
from datetime import timedelta
from datetime import datetime
import pandas as pd
import xlwt as xw
from xlwt import Workbook
today = datetime.date(datetime.now())
a_year_ago = datetime.date(datetime.now()) - timedelta(days = 365)




#----------------------------------------------#
#input tickers and number of days to scan for
#----------------------------------------------#

tickers = ['AAPL', 'TSLA', 'NVDA','DOCU']
numberofdays = 10
OutputEachStock = 'Yes'
# 'Yes' or 'No' #

#----------------------------------------------#

#tickers = ['AAPL','SFIX','AMD','AMZN','BILI','BILL','BYND','CHWY','COUP','CRWD','DKNG','DOCU','DT','ETSY','EXPI','FNKO','FSLY','FVRR','GOOS','HUBS','JD','LRCX','MELI','MTCH','NIO','NVDA','OKTA','OSTK','PINS','PLTR','RH','ROKU','SFIX','SHAK','SHOP','SNAP','SPCE','SPOT','SQ','STNE','TEAM','TSLA','TTD','TWLO','UPWK','X','ZM','ZS','MSFT','PYPL','ABBV','ABT','ADBE','BA','BABA','BAC','BDX','CAT','CMCSA','CMG','CRM','CSCO','CVS','DIS','F','FB','FDX','GOOGL','HD','HON','INTC','ITW','JNJ','JPM','KO','MCD','MDT','MMM','MRNA','MS','MSFT','MU','NFLX','NKE','NOC','ORCL','PEP','PFE','PG','QCOM','SBUX','SYY','UNH','UNP','V','WFC','WM','WMT']
#nasdaq_exchange_info = pd.read_csv('nasdaqlisted.txt', '|')
#tickers = nasdaq_exchange_info['Symbol']

#-------------------ADMIN---------------------------#
historydays = numberofdays + 5
d = "d"
historydays = str(historydays) + str(d)
wb = Workbook()
sheet1 = wb.add_sheet('Shake')
tackers = []
tuckers = []
x = 0
#-------------------ADMIN---------------------------#


def dload(ticker, sheet1, x, today, OutputEachStock):
    k = 1
    i = 1
    savedloser = 0
    savedwin = 0
    winmany = 0
    losermany = 0
    overall = 0
    
    try:
        tick = yf.Ticker(ticker)
        data = tick.history(period=historydays, interval="1d", rounding=True)
        data = data.sort_values(['Date'] , ascending=[False])
        dataminute = yf.download(tickers=ticker, period='1d', interval='1m')
        dataminute = dataminute.sort_values(['Datetime'] , ascending=[False])
        
    except Exception as e:
        pass

    try:
        #vol = data.iloc[k]['Volume']
        #close = data.iloc[k]['Close']
        #loading = x / 5000
        #print(float(loading))
        #if close > 50:
            #if vol > 1000000:
                try:     
                    for i in range(numberofdays):
                        topen = data.iloc[k]['Open']
                        tclose = data.iloc[k]['Close']
                        k += 1   
                        if tclose > topen:
                            tomopen = data.iloc[k-2]['Open']
                            overall += 1
                            if tomopen > tclose:
                                winavg = (tomopen - tclose) / tclose * 100
                                winmany += 1
                                savedwin = savedwin + winavg
                            else: 
                                loseavg = (tclose - tomopen) / tclose * 100
                                losermany += 1
                                savedloser = savedloser + loseavg          
                    
                except Exception as e:
                    pass
            
                if losermany != 0:    
                    savedloser = savedloser / losermany
                else: 
                    savedloser = 0
                    
                if winmany != 0:
                    savedwin = savedwin / winmany   
                else:
                    savedwin = 0
                
                if savedloser != 0:
                    ratio = savedwin / savedloser
                else:
                    ratio = 100.00
                
                ROI = (winmany * savedwin) - (losermany * savedloser)
                savedloser = round(savedloser, 2)
                savedwin = round(savedwin, 2)
                ratio = float(round(ratio, 2))
                
                today = str(today)
                savedwinsheet = savedwin / 100
                savedlosersheet = savedloser / 100
                ROIsheet = ROI / 100
                
                style1 = xw.easyxf('font: name Calibri; align: horiz center')
                style2 = xw.easyxf('font: name Calibri; align: horiz center', num_format_str= "0.00%")
            
                sheet1.write(x, 0, today, style1)
                sheet1.write(x, 1, ticker, style1)
                sheet1.write(x, 2, '', style1)
                sheet1.write(x, 3, '', style1)
                sheet1.write(x, 4, '', style1)
                sheet1.write(x, 6, overall, style1)
                sheet1.write(x, 7, winmany, style1)
                sheet1.write(x, 8, savedwinsheet, style2)
                sheet1.write(x, 9, savedlosersheet, style2)
                sheet1.write(x, 10, ROIsheet, style2)
                sheet1.write(x, 11, ratio, style1)
            
                
                if ROI > 2 and winmany > 2:
                    if ratio > 2:
                        if savedwin > 1:
                            tackers.append(ticker)
                            sheet1.write(x, 5, 'Y', style1)
                            currentprice = dataminute.iloc[0]['Close']
                            todaysopen = data.iloc[0]['Open']                            
                            if currentprice > todaysopen:
                                tuckers.append(ticker) 

                else:
                    sheet1.write(x, 5, '', style1)
                    pass
                        
                if ratio == 100.00:
                    ratio = 'infinite'
                    
                
                if OutputEachStock == 'Yes':
                    print(ticker + ' ' + str(overall) + ' / '+ str(i+1) + ' days were green days')
                    print (str(winmany) + ' of those had a higher open the following day')
                    print ('average win %: ' + str(savedwin) + '%')
                    print ('average lose %: ' + str(savedloser) + '%')
                    print ('reward to risk ratio: ' + str(ratio))
                    print ('ROI = ' + str(round(ROI, 2)) + '%')
                    print ()
                else:
                    pass
        
                savedwin = float(savedwin)
    except Exception as e:
        pass
    
    

for ticker in tickers:
    dload(ticker, sheet1, x, today, OutputEachStock)
    x += 1


   
tackers = str(tackers)
tuckers = str(tuckers)
print()       
print("These stocks pass my parameters: " + tackers)
print()
print("These stocks match trading criteria today: " + tuckers)

today = str(today)
wb.save('C:\\Users\\brian\\Desktop\\ShakeLong ' + today + '.xls')
